/* The following code was generated by JFlex 1.6.1 */

package yylexmain;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Practica obligatoria.flex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\16\2\0\1\60\22\0\1\20\3\0\1\1\1\23"+
    "\1\0\1\13\1\24\1\25\1\17\1\22\1\27\1\21\1\11\1\15"+
    "\1\5\7\6\2\4\1\0\1\26\1\52\1\30\1\53\2\0\6\10"+
    "\24\12\1\55\1\14\1\56\1\0\1\2\1\0\1\43\1\1\1\54"+
    "\1\36\1\45\1\41\1\1\1\47\1\35\2\1\1\42\1\1\1\37"+
    "\1\34\2\1\1\44\1\50\1\40\1\46\1\33\1\51\1\7\2\1"+
    "\1\31\1\3\1\32\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\2\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\15\1\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\14\0\1\24"+
    "\1\23\1\25\1\23\1\26\1\27\12\23\1\30\1\31"+
    "\1\32\1\2\1\0\1\2\2\33\1\34\2\0\1\35"+
    "\1\36\1\37\1\40\1\41\1\23\1\42\1\43\1\23"+
    "\1\44\1\23\1\45\5\23\3\0\1\46\1\47\2\23"+
    "\1\50\3\23\2\32\1\34\1\51\1\23\1\52\1\23"+
    "\1\53\1\54\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\61\0\u0126"+
    "\0\u0157\0\61\0\u0188\0\61\0\61\0\61\0\61\0\u01b9"+
    "\0\61\0\61\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\61\0\61\0\61\0\61\0\142\0\u04c9\0\u04fa"+
    "\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682"+
    "\0\u06b3\0\u06e4\0\61\0\u0715\0\142\0\u0746\0\142\0\142"+
    "\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce"+
    "\0\u08ff\0\u0930\0\61\0\61\0\u04c9\0\u0961\0\u0992\0\u09c3"+
    "\0\61\0\u055c\0\u05be\0\u09f4\0\u0a25\0\61\0\61\0\61"+
    "\0\61\0\61\0\u0a56\0\142\0\142\0\u0a87\0\142\0\u0ab8"+
    "\0\142\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f"+
    "\0\u0c40\0\142\0\142\0\u0c71\0\u0ca2\0\142\0\u0cd3\0\u0d04"+
    "\0\u0d35\0\u0bde\0\u0c0f\0\61\0\142\0\u0d66\0\142\0\u0d97"+
    "\0\142\0\142\0\142";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\5\2\3"+
    "\1\7\1\3\1\10\1\2\1\11\1\12\1\2\1\13"+
    "\2\4\1\2\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\3\1\32\1\33\1\34\1\35\1\3\1\36\1\37"+
    "\1\40\1\41\1\3\1\42\1\43\1\44\1\45\62\0"+
    "\2\46\1\0\7\46\20\0\17\46\2\0\1\46\10\0"+
    "\3\5\56\0\3\5\2\0\1\47\52\0\1\50\3\5"+
    "\1\51\1\0\1\47\7\0\2\50\36\0\13\52\1\0"+
    "\1\53\44\52\15\0\1\54\1\0\1\55\56\0\1\56"+
    "\1\0\1\57\1\0\1\60\1\61\1\62\65\0\1\63"+
    "\31\0\2\46\1\0\7\46\20\0\1\46\1\64\15\46"+
    "\2\0\1\46\5\0\2\46\1\0\7\46\20\0\11\46"+
    "\1\65\5\46\2\0\1\46\5\0\2\46\1\0\7\46"+
    "\20\0\4\46\1\66\1\46\1\67\10\46\2\0\1\46"+
    "\5\0\2\46\1\0\7\46\20\0\1\46\1\70\15\46"+
    "\2\0\1\46\5\0\2\46\1\0\7\46\20\0\1\46"+
    "\1\71\15\46\2\0\1\46\5\0\2\46\1\0\7\46"+
    "\20\0\14\46\1\72\2\46\2\0\1\46\5\0\2\46"+
    "\1\0\7\46\20\0\1\46\1\73\5\46\1\74\7\46"+
    "\2\0\1\46\5\0\2\46\1\0\7\46\20\0\4\46"+
    "\1\75\12\46\2\0\1\46\5\0\2\46\1\0\7\46"+
    "\20\0\12\46\1\76\4\46\2\0\1\46\5\0\2\46"+
    "\1\0\7\46\20\0\7\46\1\77\7\46\2\0\1\46"+
    "\5\0\2\46\1\0\7\46\20\0\4\46\1\100\12\46"+
    "\2\0\1\46\5\0\2\46\1\0\7\46\20\0\5\46"+
    "\1\101\11\46\2\0\1\46\5\0\2\46\1\0\7\46"+
    "\20\0\14\46\1\102\2\46\2\0\1\46\34\0\1\103"+
    "\60\0\1\104\34\0\3\105\57\0\2\106\55\0\1\107"+
    "\3\110\1\0\1\110\10\0\2\107\36\0\13\52\1\111"+
    "\1\53\57\52\1\112\1\53\44\52\16\113\1\0\42\113"+
    "\17\114\1\115\41\114\20\0\1\116\60\0\1\117\60\0"+
    "\1\120\60\0\1\121\60\0\1\122\41\0\2\46\1\0"+
    "\7\46\20\0\2\46\1\123\14\46\2\0\1\46\5\0"+
    "\2\46\1\0\7\46\20\0\5\46\1\124\11\46\2\0"+
    "\1\46\5\0\2\46\1\0\7\46\20\0\5\46\1\125"+
    "\11\46\2\0\1\46\5\0\2\46\1\0\7\46\20\0"+
    "\12\46\1\126\4\46\2\0\1\46\5\0\2\46\1\0"+
    "\7\46\20\0\11\46\1\127\5\46\2\0\1\46\5\0"+
    "\2\46\1\0\7\46\20\0\1\46\1\130\15\46\2\0"+
    "\1\46\5\0\2\46\1\0\7\46\20\0\3\46\1\131"+
    "\13\46\2\0\1\46\5\0\2\46\1\0\7\46\20\0"+
    "\5\46\1\132\11\46\2\0\1\46\5\0\2\46\1\0"+
    "\7\46\20\0\15\46\1\133\1\46\2\0\1\46\5\0"+
    "\2\46\1\0\7\46\20\0\5\46\1\134\11\46\2\0"+
    "\1\46\5\0\2\46\1\0\7\46\20\0\11\46\1\135"+
    "\5\46\2\0\1\46\5\0\2\46\1\0\7\46\20\0"+
    "\2\46\1\136\14\46\2\0\1\46\11\0\2\106\2\0"+
    "\1\137\53\0\3\110\1\0\1\110\54\0\3\110\1\0"+
    "\1\110\1\140\47\0\17\114\1\141\56\114\1\0\43\114"+
    "\1\0\2\46\1\0\7\46\20\0\3\46\1\142\13\46"+
    "\2\0\1\46\5\0\2\46\1\0\7\46\20\0\4\46"+
    "\1\143\12\46\2\0\1\46\5\0\2\46\1\0\7\46"+
    "\20\0\10\46\1\144\6\46\2\0\1\46\5\0\2\46"+
    "\1\0\7\46\20\0\13\46\1\145\3\46\2\0\1\46"+
    "\5\0\2\46\1\0\7\46\20\0\12\46\1\146\4\46"+
    "\2\0\1\46\5\0\2\46\1\0\7\46\20\0\2\46"+
    "\1\147\14\46\2\0\1\46\5\0\2\46\1\0\7\46"+
    "\20\0\13\46\1\150\3\46\2\0\1\46\5\0\2\46"+
    "\1\0\7\46\20\0\7\46\1\151\7\46\2\0\1\46"+
    "\11\0\2\152\56\0\3\153\1\0\1\153\1\0\1\153"+
    "\46\0\15\114\1\154\43\114\1\0\2\46\1\0\7\46"+
    "\20\0\5\46\1\155\11\46\2\0\1\46\5\0\2\46"+
    "\1\0\7\46\20\0\11\46\1\156\5\46\2\0\1\46"+
    "\5\0\2\46\1\0\7\46\20\0\7\46\1\157\7\46"+
    "\2\0\1\46\5\0\2\46\1\0\7\46\20\0\17\46"+
    "\2\0\1\160\5\0\2\46\1\0\7\46\20\0\12\46"+
    "\1\161\4\46\2\0\1\46\5\0\2\46\1\0\7\46"+
    "\20\0\4\46\1\162\12\46\2\0\1\46\5\0\2\46"+
    "\1\0\7\46\20\0\5\46\1\163\11\46\2\0\1\46"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3528];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\2\1\1\11\1\1\4\11"+
    "\1\1\2\11\17\1\4\11\1\1\14\0\1\11\17\1"+
    "\2\11\2\1\1\0\1\1\1\11\2\1\2\0\5\11"+
    "\14\1\3\0\12\1\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	AnalizadorLexico(java.io.Reader in, boolean deb) {
		this.zzReader = in;
		this.debug = deb;
	}
	boolean debug = false;
	boolean getEndOfFile(){
		return zzAtEOF;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { if (debug){System.out.print("ERROR");}
		System.out.print("Detectado un error... continuando");
		return new Symbol(sym.error);
            }
          case 46: break;
          case 2: 
            { if (debug){System.out.print("constint");}
		return new Symbol(sym.constint, yytext());
            }
          case 47: break;
          case 3: 
            { if (debug){System.out.print(".");}
		return new Symbol(sym.punto);
            }
          case 48: break;
          case 4: 
            { if (debug){System.out.println();}
            }
          case 49: break;
          case 5: 
            { if (debug){System.out.print(" ");};
            }
          case 50: break;
          case 6: 
            { if (debug){System.out.print("para");}
		return new Symbol(sym.para);
            }
          case 51: break;
          case 7: 
            { if (debug){System.out.print("parc");}
		return new Symbol(sym.parc);
            }
          case 52: break;
          case 8: 
            { if (debug){System.out.print("puntc");}
		return new Symbol(sym.puntc);
            }
          case 53: break;
          case 9: 
            { if (debug){System.out.print("coma");}
		return new Symbol(sym.coma);
            }
          case 54: break;
          case 10: 
            { if (debug){System.out.print("igual");}
		return new Symbol(sym.igual);
            }
          case 55: break;
          case 11: 
            { if (debug){System.out.print("llava");}
		return new Symbol(sym.llava);
            }
          case 56: break;
          case 12: 
            { if (debug){System.out.print("llavc");}
		return new Symbol(sym.llavc);
            }
          case 57: break;
          case 13: 
            { if (debug){System.out.print("less");}
		return new Symbol(sym.less);
            }
          case 58: break;
          case 14: 
            { if (debug){System.out.print("more");}
		return new Symbol(sym.more);
            }
          case 59: break;
          case 15: 
            { if (debug){System.out.print("corcha");}
		return new Symbol(sym.corcha);
            }
          case 60: break;
          case 16: 
            { if (debug){System.out.print("corchc");}
		return new Symbol(sym.corchc);
            }
          case 61: break;
          case 17: 
            { if (debug){System.out.print("\t");}
            }
          case 62: break;
          case 18: 
            { if (debug){System.out.print("\r");}
            }
          case 63: break;
          case 19: 
            { if(debug){System.out.print("ident");}
		return new Symbol(sym.ident, yytext());
            }
          case 64: break;
          case 20: 
            { if (debug){System.out.print("equals");}
		return new Symbol(sym.equals);
            }
          case 65: break;
          case 21: 
            { if (debug){System.out.print("or");}
		return new Symbol(sym.orr);
            }
          case 66: break;
          case 22: 
            { if (debug){System.out.print("if");}
		return new Symbol(sym.iff);
            }
          case 67: break;
          case 23: 
            { if (debug){System.out.print("do");}
		return new Symbol(sym.doo);
            }
          case 68: break;
          case 24: 
            { if (debug){System.out.print("lesseq");}
		return new Symbol(sym.lesseq);
            }
          case 69: break;
          case 25: 
            { if (debug){System.out.print("moreq");}
		return new Symbol(sym.moreq);
            }
          case 70: break;
          case 26: 
            { if (debug){System.out.print("constfloat");}
		return new Symbol(sym.constfloat, yytext());
            }
          case 71: break;
          case 27: 
            { if (debug){System.out.print("constlit");}
		return new Symbol(sym.constlit, yytext());
            }
          case 72: break;
          case 28: 
            { if (debug){System.out.print("coment");}
		return new Symbol(sym.coment);
            }
          case 73: break;
          case 29: 
            { if (debug){System.out.print("div");}
		return new Symbol(sym.div);
            }
          case 74: break;
          case 30: 
            { if (debug){System.out.print("mul");}
		return new Symbol(sym.mul);
            }
          case 75: break;
          case 31: 
            { if (debug){System.out.print("menos");}
		return new Symbol(sym.menos);
            }
          case 76: break;
          case 32: 
            { if (debug){System.out.print("mas");}
		return new Symbol(sym.mas);
            }
          case 77: break;
          case 33: 
            { if (debug){System.out.print("rest");}
		return new Symbol(sym.rest);
            }
          case 78: break;
          case 34: 
            { if (debug){System.out.print("intt");}
		return new Symbol(sym.intt);
            }
          case 79: break;
          case 35: 
            { if (debug){System.out.print("not");}
		return new Symbol(sym.nott);
            }
          case 80: break;
          case 36: 
            { if (debug){System.out.print("for");}
		return new Symbol(sym.forr);
            }
          case 81: break;
          case 37: 
            { if (debug){System.out.print("and");}
		return new Symbol(sym.andd);
            }
          case 82: break;
          case 38: 
            { if (debug){System.out.print("voidd");}
		return new Symbol(sym.voidd);
            }
          case 83: break;
          case 39: 
            { if (debug){System.out.print("then");}
		return new Symbol(sym.thenn);
            }
          case 84: break;
          case 40: 
            { if (debug){System.out.print("else");}
		return new Symbol(sym.elsee);
            }
          case 85: break;
          case 41: 
            { if (debug){System.out.print("floatt");}
		return new Symbol(sym.floatt);
            }
          case 86: break;
          case 42: 
            { if (debug){System.out.print("until");}
		return new Symbol(sym.untill);
            }
          case 87: break;
          case 43: 
            { if (debug){System.out.print("while");}
		return new Symbol(sym.whilee);
            }
          case 88: break;
          case 44: 
            { if (debug){System.out.print("returnn");}
		return new Symbol(sym.returnn);
            }
          case 89: break;
          case 45: 
            { if (debug){System.out.print("struct");}
		return new Symbol(sym.struct);
            }
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
