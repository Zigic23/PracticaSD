package yylexmain;
import java_cup.runtime.*;
import java.util.ArrayList;
parser code {:
	public void report_error(String message, Object info) {
       	StringBuffer m = new StringBuffer("Error");
		System.out.println("Mensaje: "+message);
		System.out.println("info: "+info.toString());
		if(info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
			/* Comprueba si el numero de lÃ­nea es mayor o igual que cero */
			if(s.left >= 0) {
				m.append(" en linea "+(s.left+1));
				/*Comprueba si el numero de columna es mayoro igual que cero */
				if (s.right >= 0)
					m.append(", y columna "+(s.right+1));
			}
		}
		m.append(" : "+message);
		System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
       	report_error(message, info);
		System.exit(1);
    }
	:};
terminal String ident, iff, corcha, corchc, thenn, struct, orr, andd, punto, nott, elsee, less, equals, more, lesseq, moreq, forr, whilee, doo, untill, constint, constfloat, constlit, coment, menos, mas, mul, div, rest, para, parc, puntc, coma, igual, voidd, intt, floatt, llava, llavc, returnn;
non terminal SymbolGen PROGRAM, PART, TYPE, RESTPART, LISTPARAM, BLQ, SENTLIST, INICIO, ID, LDIM, LFIELD, SENT, LID, EXP, LEXP, OP, FACTOR, LCOND, OPL, OPR, COND;
/* Precedences */
precedence left mul, div, rest, mas, menos;
precedence left andd, orr;
precedence left error;
start with INICIO;

INICIO::= PROGRAM:prg{:
		SymbolGen s = new SymbolGen();
		s.valor = "<H2> Funciones: </H2>\n<UL>\n";
		for (int i = prg.funs.size()-1; i >= 0; i--){
			s.valor += "<LI> <A HREF=\"#" + prg.funs.get(i).id + "\">" + prg.funs.get(i).type + " " + prg.funs.get(i).id + " (";
			for (int j = prg.funs.get(i).param.size()-1; j > 0; j--){
				s.valor += prg.funs.get(i).param.get(j) + ", ";
			} 
			s.valor += prg.funs.get(i).param.get(0) + "); </A> </LI>\n";
		}
		s.valor += "</UL>\n <HR/>" + prg + "</BR>\n</body></html>";
		RESULT = s;
	:};
PROGRAM::= PART:part PROGRAM:prg {:
		SymbolGen s = new SymbolGen();
		s.funs = prg.funs;
		if (part.fun != null){
			s.funs.add(part.fun);	
		}
		s.valor = part.valor + "</BR>\n" + prg.valor;
		RESULT = s;
	:}
	| PART:part{:
		ArrayList<SymbolFunc> arr = new ArrayList<>();
		if (part.fun != null){
			arr.add(part.fun);
		}
		SymbolGen s = new SymbolGen();						
		s.valor = part.valor + "</BR>\n";
		s.funs = arr;
		RESULT = s;
	:};
PART::= TYPE:tipo RESTPART:rest {:
		SymbolGen s = new SymbolGen();
		SymbolFunc fun = new SymbolFunc();
		fun.id = rest.id;
		fun.type = tipo.valor;
		fun.param = rest.param;
		s.fun = fun;
		s.valor = "<code>\n<A NAME=\"" + rest.id + "\"><span class=\"palres\">" + tipo.valor + "</span> " + rest.valor + "</code>\n<A HREF=\"#" + rest.id + "\">Inicio de la funcion</A> <A HREF=\"#inicio\">Inicio del programa</A><HR/>";
		RESULT = s;
	:};
RESTPART::= ident:ide para LISTPARAM:lis parc BLQ:blq {:
		SymbolGen s = new SymbolGen();
		s.id = ide;
		s.param = lis.param;
		s.valor = "<span CLASS=\"ident\">" + ide + "</span>(";
		for (int j = lis.param.size()-1; j > 0; j--){
			s.valor += lis.param.get(j) + ", ";
		} 
		s.valor += lis.param.get(0) + ")<BR/>" + blq.valor;
		RESULT = s;
	:};
BLQ::= llava SENTLIST:sen llavc{:
		SymbolGen s = new SymbolGen();
		s.valor = "{<BR/><div style=\"padding-left:.5cm\">" + sen.valor + "</div>}</BR>\n";	
		RESULT = s;
	:};
LISTPARAM::= LISTPARAM:lis coma TYPE:tipo ident:ide {:
		SymbolGen s = new SymbolGen();
		s = lis;
		s.param.add("<span class=\"palres\">" + tipo.valor + "</span> <span class=\"ident\">" + ide + "</span>");
		RESULT = s;
	:}
	| TYPE:tipo ident:ide{:
		SymbolGen s = new SymbolGen();
		ArrayList<String> arr = new ArrayList<>();
		arr.add("<span class=\"palres\">" + tipo.valor + "</span> <span class=\"ident\">" + ide + "</span>");
		s.param = arr;
		RESULT = s;
	:};
TYPE::= voidd:vo {:
		SymbolGen s = new SymbolGen();
		s.valor = "void";
		RESULT = s;
	:}
	| intt:in {:
		SymbolGen s = new SymbolGen();
		s.valor = "int";
		RESULT = s;
	:}
	| floatt:flo{:
		SymbolGen s = new SymbolGen();
		s.valor = "float";
		RESULT = s;
	:};

SENTLIST::= SENTLIST:senL SENT:sen {:
		SymbolGen s = new SymbolGen();
		s.valor = senL.valor + sen.valor;
		RESULT = s;
	:} 
	| SENT:sen{:
		SymbolGen s = new SymbolGen();
		s.valor = sen.valor;
		RESULT = s;
	:};
SENT::= TYPE:tipo LID:lid puntc{:
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"palres\">" + tipo.valor + "</span> " + lid.valor + ";</BR>\n";
		RESULT = s;
	:} 
	| ID:ide igual EXP:exp puntc {:
		SymbolGen s = new SymbolGen();
		s.valor = ide.valor + " = " + exp.valor + ";</BR>\n";
		RESULT = s;
	:}
	| ident:ide para LEXP:lexp parc puntc {:
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"ident\">" + ide + "</span> (" + lexp.valor + ");</BR>\n";
		RESULT = s;
	:}
	| returnn EXP:exp puntc {:
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"palres\">return</span> " + exp.valor + ";";
		RESULT = s;
	:}
	| error;
LID::= ID:ide {:
		SymbolGen s = new SymbolGen();
		s.valor = ide.valor;
		RESULT = s;
	:}
	| LID:lid coma ID:ide {:
		SymbolGen s = new SymbolGen();
		s.valor = lid.valor + ", " + ide.valor;
		RESULT = s;
	:};
LEXP::= EXP:exp {:
		SymbolGen s = new SymbolGen();
		s.valor = exp.valor;
		RESULT = s;
	:}
	| LEXP:lexp coma EXP:exp {:
		SymbolGen s = new SymbolGen();
		s.valor = lexp.valor + ", " + exp.valor;
		RESULT = s;
	:};
EXP::= EXP:exp1 OP:op EXP:exp2 {:
		SymbolGen s = new SymbolGen();
		s.valor = exp1.valor + op.valor + exp2.valor;
		RESULT = s;
	:}
	| FACTOR:fac {:
		SymbolGen s = new SymbolGen();
		s.valor = fac.valor;
		RESULT = s;
	:};
OP::= mas {:
		SymbolGen s = new SymbolGen();
		s.valor = " + ";
		RESULT = s;
	:}
	| menos {:
		SymbolGen s = new SymbolGen();
		s.valor = " - ";
		RESULT = s;
	:}
	| mul {:
		SymbolGen s = new SymbolGen();
		s.valor = " * ";
		RESULT = s;
	:}
	| div {:
		SymbolGen s = new SymbolGen();
		s.valor = " / ";
		RESULT = s;
	:}
	| rest {:
		SymbolGen s = new SymbolGen();
		s.valor = " % ";
		RESULT = s;
	:};
FACTOR::= ident:ide para LEXP:lexp parc {:
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"ident\">" + ide + "</span> (" + lexp.valor + ")";
		RESULT = s;
	:}
	| para EXP:exp parc {:
		SymbolGen s = new SymbolGen();
		s.valor = "(" + exp.valor + ")";
		RESULT = s;
	:}
	| constint:cons {:
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"cte\">" + cons + "</span>";
		RESULT = s;
	:}
	| constfloat:cons {:
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"cte\">" + cons + "</span>";
		RESULT = s;
	:}
	| constlit:cons {:
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"cte\">" + cons + "</span>";
		RESULT = s;
	:}
	| ID:ide {:
		SymbolGen s = new SymbolGen();
		s.valor = ide.valor;
		RESULT = s;
	:};
ID ::= ident:ide {:
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"ident\">" + ide + "</span>";
		RESULT = s;
	:}
	| ident:ide1 punto ident:ide2 {:
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"ident\">" + ide1 + "." + ide2 + "</span>";
		RESULT = s;
	:}
	| ident:ide LDIM:ldim {:
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"ident\">" + ide + "</span>" + ldim.valor;
		RESULT = s;
	:} 
	| error;

SENT::= iff para LCOND:lcond parc thenn BLQ:blq1 elsee BLQ:blq2 {:
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"palres\">if</span> (" + lcond.valor + ") <span class=\"palres\">then</span></BR>\n" + blq1.valor + "<span class=\"palres\">else</span></BR>\n" + blq2.valor;
		RESULT = s;
	:}
	| forr para ident:ide igual EXP:exp puntc LCOND:lcond puntc ident:ide2 igual EXP:exp2 parc BLQ:blq {:
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"palres\">for</span> (<span class=\"ident\">" + ide + "</span> = " + exp.valor + "; " + lcond.valor + "; <span class=\"ident\">" + ide2 + "</span> = " + exp2.valor + ")</BR>\n" + blq.valor; 
		RESULT = s;
	:}
	| whilee para LCOND:lcond parc BLQ:blq {:
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"palres\">while</span> (" + lcond.valor + ")</BR>\n" + blq.valor;
		RESULT = s;
	:}
	| doo BLQ:blq untill para LCOND:lcond parc {:
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"palres\">do</span></BR>\n" + blq.valor + "until (" + lcond.valor + ")</BR>\n";
		RESULT = s;
	:}
	| BLQ:blq {:
		SymbolGen s = new SymbolGen();
		s.valor = blq.valor;
		RESULT = s;
	:};

LCOND::= LCOND:lcond1 OPL:opl LCOND:lcond2 {:
		SymbolGen s = new SymbolGen();
		s.valor = lcond1.valor + opl.valor + lcond2.valor;
		RESULT = s;
	:} 
	| COND:cond {:
		SymbolGen s = new SymbolGen();
		s.valor = cond.valor;
		RESULT = s;
	:}
	| nott COND:cond{:
		SymbolGen s = new SymbolGen();
		s.valor = "not " + cond.valor;
		RESULT = s;
	:};
OPL::= orr {:
		SymbolGen s = new SymbolGen();
		s.valor = " or ";
		RESULT = s;
	:}
	| andd {:
		SymbolGen s = new SymbolGen();
		s.valor = " and ";
		RESULT = s;
	:}
	| error;
COND::= EXP:exp1 OPR:opr EXP:exp2 {:
		SymbolGen s = new SymbolGen();
		s.valor = exp1.valor + opr.valor + exp2.valor;
		RESULT = s;
	:};
OPR::= equals {:
		SymbolGen s = new SymbolGen();
		s.valor = " == ";
		RESULT = s;
	:}
	| less {:
		SymbolGen s = new SymbolGen();
		s.valor = " < ";
		RESULT = s;
	:}
	| more {:
		SymbolGen s = new SymbolGen();
		s.valor = " > ";
		RESULT = s;
	:}
	| moreq {:
		SymbolGen s = new SymbolGen();
		s.valor = " >= ";
		RESULT = s;
	:}
	| lesseq {:
		SymbolGen s = new SymbolGen();
		s.valor = " <= ";
		RESULT = s;
	:}
	| error;

PART ::= struct ident:ide llava LFIELD:lfield llavc puntc {:
		SymbolGen s = new SymbolGen();
		s.valor = "<span CLASS=\"palres\">struct</span> <span class=\"ident\">" + ide + "</span></BR>\n{<div style=\"padding-left:.5cm\">" + lfield.valor + "</div>\n};</BR>\n";
		RESULT = s;
	:}
	| error;
LFIELD ::= LFIELD:lfield TYPE:type LID:lid puntc  {:
		SymbolGen s = new SymbolGen();
		s.valor = lfield.valor + "<span class=\"palres\">" + type.valor + "</span> " + lid.valor + ";</BR>\n";
		RESULT = s;
	:}
	| TYPE:type LID:lid puntc {:
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"palres\">" + type.valor + "</span> " + lid.valor + ";</BR>\n";
		RESULT = s;
	:}
	| error;

LDIM ::= LDIM:ldim corcha constint:cons corchc {:
		SymbolGen s = new SymbolGen();
		s.valor = ldim.valor + "[<span class=\"cte\">" + cons + "</span>]";
		RESULT = s;
	:}
	| corcha constint:cons corchc {:
		SymbolGen s = new SymbolGen();
		s.valor = "[<span class=\"cte\">" + cons + "</span>]";
		RESULT = s;
	:}
	| error;