
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package yylexmain;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\011\003\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\005\007" +
    "\000\002\007\005\000\002\006\006\000\002\006\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\010\004\000\002\010\003\000\002\015\005\000\002\015" +
    "\006\000\002\015\007\000\002\015\005\000\002\015\003" +
    "\000\002\016\003\000\002\016\005\000\002\020\003\000" +
    "\002\020\005\000\002\017\005\000\002\017\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\022\006\000\002\022\005" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\012\003\000\002\012\005\000\002" +
    "\012\004\000\002\012\003\000\002\015\012\000\002\015" +
    "\017\000\002\015\007\000\002\015\010\000\002\015\003" +
    "\000\002\023\005\000\002\023\003\000\002\023\004\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\026\005\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\003\010\000\002\003\003\000\002\014\006\000" +
    "\002\014\005\000\002\014\003\000\002\013\006\000\002" +
    "\013\005\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\014\003\014\011\010\046\011\047\006\050" +
    "\013\001\002\000\004\002\000\001\002\000\016\002\ufffe" +
    "\003\014\011\010\046\011\047\006\050\013\001\002\000" +
    "\006\003\ufff7\004\ufff7\001\002\000\004\002\220\001\002" +
    "\000\004\004\204\001\002\000\006\003\ufff8\004\ufff8\001" +
    "\002\000\004\004\016\001\002\000\006\003\ufff6\004\ufff6" +
    "\001\002\000\016\002\uffc6\003\uffc6\011\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\001\002\000\016\002\ufffd\003\ufffd\011\ufffd" +
    "\046\ufffd\047\ufffd\050\ufffd\001\002\000\004\041\017\001" +
    "\002\000\010\046\011\047\006\050\013\001\002\000\006" +
    "\042\024\044\023\001\002\000\004\004\022\001\002\000" +
    "\006\042\ufff9\044\ufff9\001\002\000\010\046\011\047\006" +
    "\050\013\001\002\000\004\051\026\001\002\000\016\002" +
    "\ufffc\003\ufffc\011\ufffc\046\ufffc\047\ufffc\050\ufffc\001\002" +
    "\000\030\003\036\004\031\005\040\024\037\025\042\026" +
    "\027\046\011\047\006\050\013\051\026\053\041\001\002" +
    "\000\004\051\026\001\002\000\032\003\uffd5\004\uffd5\005" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\001\002\000\014\003\112\006" +
    "\113\014\111\041\171\045\uffdd\001\002\000\032\003\036" +
    "\004\031\005\040\024\037\025\042\026\027\046\011\047" +
    "\006\050\013\051\026\052\167\053\041\001\002\000\032" +
    "\003\ufff4\004\ufff4\005\ufff4\024\ufff4\025\ufff4\026\ufff4\046" +
    "\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\001\002" +
    "\000\006\003\053\004\163\001\002\000\004\045\156\001" +
    "\002\000\034\003\uffef\004\uffef\005\uffef\024\uffef\025\uffef" +
    "\026\uffef\045\uffda\046\uffef\047\uffef\050\uffef\051\uffef\052" +
    "\uffef\053\uffef\001\002\000\004\041\142\001\002\000\004" +
    "\041\133\001\002\000\016\003\053\004\050\030\046\031" +
    "\045\032\054\041\057\001\002\000\004\041\043\001\002" +
    "\000\020\003\053\004\050\015\044\030\046\031\045\032" +
    "\054\041\057\001\002\000\016\003\053\004\050\030\046" +
    "\031\045\032\054\041\057\001\002\000\042\003\uffe0\012" +
    "\uffe0\013\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\001\002\000\042\003\uffe1\012\uffe1\013\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\001\002\000\042\003\uffe9\012\uffe9\013\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\042\uffe9\043\uffe9\044\uffe9\001\002\000" +
    "\050\003\112\006\113\012\uffdd\013\uffdd\014\111\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\110\042\uffdd\043\uffdd\044\uffdd" +
    "\001\002\000\014\003\uffd3\012\uffd3\013\uffd3\042\uffd3\043" +
    "\uffd3\001\002\000\042\003\uffde\012\uffde\013\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\042\uffde\043\uffde\044\uffde\001\002" +
    "\000\042\003\uffda\012\uffda\013\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\042\uffda\043\uffda\044\uffda\001\002\000\042\003" +
    "\uffdf\012\uffdf\013\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\001\002\000\030\003\104\017\106" +
    "\020\100\021\103\022\102\023\101\034\064\035\062\036" +
    "\065\037\067\040\063\001\002\000\012\003\071\012\075" +
    "\013\072\042\074\001\002\000\016\003\053\004\050\030" +
    "\046\031\045\032\054\041\057\001\002\000\016\034\064" +
    "\035\062\036\065\037\067\040\063\042\066\001\002\000" +
    "\016\003\053\004\050\030\046\031\045\032\054\041\057" +
    "\001\002\000\016\003\uffe8\004\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\041\uffe8\001\002\000\016\003\uffe4\004\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\041\uffe4\001\002\000\016\003\uffe7\004" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\041\uffe7\001\002\000\016" +
    "\003\uffe6\004\uffe6\030\uffe6\031\uffe6\032\uffe6\041\uffe6\001" +
    "\002\000\042\003\uffe2\012\uffe2\013\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\042\uffe2\043\uffe2\044\uffe2\001\002\000\016" +
    "\003\uffe5\004\uffe5\030\uffe5\031\uffe5\032\uffe5\041\uffe5\001" +
    "\002\000\042\003\uffea\012\uffea\013\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\034\064\035\062\036\065\037" +
    "\067\040\063\042\uffea\043\uffea\044\uffea\001\002\000\020" +
    "\003\uffcf\004\uffcf\015\uffcf\030\uffcf\031\uffcf\032\uffcf\041" +
    "\uffcf\001\002\000\020\003\uffd0\004\uffd0\015\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\041\uffd0\001\002\000\020\003\053\004" +
    "\050\015\044\030\046\031\045\032\054\041\057\001\002" +
    "\000\004\051\026\001\002\000\020\003\uffd1\004\uffd1\015" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\041\uffd1\001\002\000\032" +
    "\003\uffd7\004\uffd7\005\uffd7\024\uffd7\025\uffd7\026\uffd7\046" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\001\002" +
    "\000\014\003\071\012\075\013\072\042\uffd4\043\uffd4\001" +
    "\002\000\016\003\uffcd\004\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\041\uffcd\001\002\000\016\003\uffca\004\uffca\030\uffca\031" +
    "\uffca\032\uffca\041\uffca\001\002\000\016\003\uffc9\004\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\041\uffc9\001\002\000\016\003" +
    "\uffcb\004\uffcb\030\uffcb\031\uffcb\032\uffcb\041\uffcb\001\002" +
    "\000\016\003\uffc8\004\uffc8\030\uffc8\031\uffc8\032\uffc8\041" +
    "\uffc8\001\002\000\016\003\053\004\050\030\046\031\045" +
    "\032\054\041\057\001\002\000\016\003\uffcc\004\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\041\uffcc\001\002\000\026\003\uffce" +
    "\012\uffce\013\uffce\034\064\035\062\036\065\037\067\040" +
    "\063\042\uffce\043\uffce\001\002\000\016\003\053\004\050" +
    "\030\046\031\045\032\054\041\057\001\002\000\004\004" +
    "\122\001\002\000\046\003\uffc0\006\uffc0\012\uffc0\013\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\042\uffc0\043\uffc0\044\uffc0" +
    "\045\uffc0\001\002\000\004\030\120\001\002\000\046\003" +
    "\uffdb\006\115\012\uffdb\013\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\001\002\000\004" +
    "\030\116\001\002\000\004\007\117\001\002\000\046\003" +
    "\uffc2\006\uffc2\012\uffc2\013\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\001\002\000\004" +
    "\007\121\001\002\000\046\003\uffc1\006\uffc1\012\uffc1\013" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\040\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\001\002\000\044\003\uffdc\012\uffdc\013\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\045\uffdc\001\002\000\006\042\126\044\125\001\002\000" +
    "\020\034\064\035\062\036\065\037\067\040\063\042\uffec" +
    "\044\uffec\001\002\000\016\003\053\004\050\030\046\031" +
    "\045\032\054\041\057\001\002\000\042\003\uffe3\012\uffe3" +
    "\013\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\001\002\000\020\034\064\035\062\036\065\037" +
    "\067\040\063\042\uffeb\044\uffeb\001\002\000\014\003\uffd2" +
    "\012\uffd2\013\uffd2\042\uffd2\043\uffd2\001\002\000\016\034" +
    "\064\035\062\036\065\037\067\040\063\043\132\001\002" +
    "\000\032\003\ufff0\004\ufff0\005\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0" +
    "\001\002\000\020\003\053\004\050\015\044\030\046\031" +
    "\045\032\054\041\057\001\002\000\012\003\071\012\075" +
    "\013\072\042\135\001\002\000\004\010\136\001\002\000" +
    "\004\051\026\001\002\000\004\016\140\001\002\000\004" +
    "\051\026\001\002\000\032\003\uffd9\004\uffd9\005\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\053\uffd9\001\002\000\004\004\143\001\002\000" +
    "\004\045\144\001\002\000\016\003\053\004\050\030\046" +
    "\031\045\032\054\041\057\001\002\000\016\034\064\035" +
    "\062\036\065\037\067\040\063\043\146\001\002\000\020" +
    "\003\053\004\050\015\044\030\046\031\045\032\054\041" +
    "\057\001\002\000\012\003\071\012\075\013\072\043\150" +
    "\001\002\000\004\004\151\001\002\000\004\045\152\001" +
    "\002\000\016\003\053\004\050\030\046\031\045\032\054" +
    "\041\057\001\002\000\016\034\064\035\062\036\065\037" +
    "\067\040\063\042\154\001\002\000\004\051\026\001\002" +
    "\000\032\003\uffd8\004\uffd8\005\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\001\002\000\016\003\053\004\050\030\046\031\045\032" +
    "\054\041\057\001\002\000\016\034\064\035\062\036\065" +
    "\037\067\040\063\043\160\001\002\000\032\003\ufff2\004" +
    "\ufff2\005\ufff2\024\ufff2\025\ufff2\026\ufff2\046\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\053\ufff2\001\002\000\006\043" +
    "\uffee\044\uffee\001\002\000\006\043\164\044\165\001\002" +
    "\000\014\003\112\006\113\014\111\043\uffdd\044\uffdd\001" +
    "\002\000\032\003\ufff3\004\ufff3\005\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053" +
    "\ufff3\001\002\000\006\003\053\004\163\001\002\000\006" +
    "\043\uffed\044\uffed\001\002\000\042\002\ufffb\003\ufffb\004" +
    "\ufffb\005\ufffb\011\ufffb\016\ufffb\024\ufffb\025\ufffb\026\ufffb" +
    "\027\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053" +
    "\ufffb\001\002\000\032\003\ufff5\004\ufff5\005\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052" +
    "\ufff5\053\ufff5\001\002\000\016\003\053\004\050\030\046" +
    "\031\045\032\054\041\057\001\002\000\006\042\173\044" +
    "\125\001\002\000\004\043\174\001\002\000\032\003\ufff1" +
    "\004\ufff1\005\ufff1\024\ufff1\025\ufff1\026\ufff1\046\ufff1\047" +
    "\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\001\002\000\004" +
    "\027\176\001\002\000\004\041\177\001\002\000\020\003" +
    "\053\004\050\015\044\030\046\031\045\032\054\041\057" +
    "\001\002\000\012\003\071\012\075\013\072\042\201\001" +
    "\002\000\032\003\uffd6\004\uffd6\005\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\001\002\000\004\004\203\001\002\000\006\042\ufffa" +
    "\044\ufffa\001\002\000\004\051\205\001\002\000\012\003" +
    "\207\046\011\047\006\050\013\001\002\000\012\046\011" +
    "\047\006\050\013\052\213\001\002\000\012\046\uffc3\047" +
    "\uffc3\050\uffc3\052\uffc3\001\002\000\006\003\053\004\163" +
    "\001\002\000\006\043\212\044\165\001\002\000\012\046" +
    "\uffc4\047\uffc4\050\uffc4\052\uffc4\001\002\000\004\043\217" +
    "\001\002\000\006\003\053\004\163\001\002\000\006\043" +
    "\216\044\165\001\002\000\012\046\uffc5\047\uffc5\050\uffc5" +
    "\052\uffc5\001\002\000\016\002\uffc7\003\uffc7\011\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\001\002\000\004\002\001\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\012\002\003\003\004\004\011\011\006\001" +
    "\001\000\002\001\001\000\010\002\220\003\004\004\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\020\006\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\201\001" +
    "\001\000\004\007\024\001\001\000\002\001\001\000\014" +
    "\004\033\007\027\010\031\012\034\015\032\001\001\000" +
    "\004\007\174\001\001\000\002\001\001\000\004\013\113" +
    "\001\001\000\012\004\033\007\027\012\034\015\167\001" +
    "\001\000\002\001\001\000\006\012\160\016\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\051\017\130\022\046\001\001" +
    "\000\002\001\001\000\014\012\051\017\054\022\046\023" +
    "\055\026\050\001\001\000\012\012\051\017\054\022\046" +
    "\026\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\060\025\104\001\001\000\004\024\072\001\001" +
    "\000\010\012\051\017\057\022\046\001\001\000\004\021" +
    "\060\001\001\000\010\012\051\017\067\022\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\051\017\054\022\046\023\076\026\050\001\001" +
    "\000\004\007\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\051\017\106\022\046\001\001\000\002" +
    "\001\001\000\004\021\060\001\001\000\012\012\051\017" +
    "\123\020\122\022\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\060\001\001\000\010\012\051\017\126\022\046" +
    "\001\001\000\002\001\001\000\004\021\060\001\001\000" +
    "\002\001\001\000\004\021\060\001\001\000\002\001\001" +
    "\000\014\012\051\017\054\022\046\023\133\026\050\001" +
    "\001\000\004\024\072\001\001\000\002\001\001\000\004" +
    "\007\136\001\001\000\002\001\001\000\004\007\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\051\017\144\022\046\001\001\000\004\021" +
    "\060\001\001\000\014\012\051\017\054\022\046\023\146" +
    "\026\050\001\001\000\004\024\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\051\017\152\022\046" +
    "\001\001\000\004\021\060\001\001\000\004\007\154\001" +
    "\001\000\002\001\001\000\010\012\051\017\156\022\046" +
    "\001\001\000\004\021\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\113\001\001" +
    "\000\002\001\001\000\004\012\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\051" +
    "\017\123\020\171\022\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\051\017\054\022\046\023\177\026" +
    "\050\001\001\000\004\024\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\207\014\205\001\001\000\004\004\213\001\001" +
    "\000\002\001\001\000\006\012\160\016\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\160\016\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void report_error(String message, Object info) {
       	StringBuffer m = new StringBuffer("Error");
		System.out.println("Mensaje: "+message);
		System.out.println("info: "+info.toString());
		if(info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
			/* Comprueba si el numero de línea es mayor o igual que cero */
			if(s.left >= 0) {
				m.append(" en linea "+(s.left+1));
				/*Comprueba si el numero de columna es mayoro igual que cero */
				if (s.right >= 0)
					m.append(", y columna "+(s.right+1));
			}
		}
		m.append(" : "+message);
		System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
       	report_error(message, info);
		System.exit(1);
    }
	

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen start_val = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAM 
            {
              SymbolGen RESULT =null;
		int prgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen prg = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "<H2> Funciones: </H2>\n<UL>\n";
		for (int i = prg.funs.size()-1; i >= 0; i--){
			s.valor += "<LI> <A HREF=\"#" + prg.funs.get(i).id + "\">" + prg.funs.get(i).type + " " + prg.funs.get(i).id + " (";
			for (int j = prg.funs.get(i).param.size()-1; j > 0; j--){
				s.valor += prg.funs.get(i).param.get(j) + ", ";
			} 
			s.valor += prg.funs.get(i).param.get(0) + "); </A> </LI>\n";
		}
		s.valor += "</UL>\n <HR/>" + prg + "</BR>\n</body></html>";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= PART PROGRAM 
            {
              SymbolGen RESULT =null;
		int partleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int partright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen part = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int prgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen prg = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.funs = prg.funs;
		if (part.fun != null){
			s.funs.add(part.fun);	
		}
		s.valor = part.valor + "</BR>\n" + prg.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= PART 
            {
              SymbolGen RESULT =null;
		int partleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen part = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ArrayList<SymbolFunc> arr = new ArrayList<>();
		if (part.fun != null){
			arr.add(part.fun);
		}
		SymbolGen s = new SymbolGen();						
		s.valor = part.valor + "</BR>\n";
		s.funs = arr;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PART ::= TYPE RESTPART 
            {
              SymbolGen RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen tipo = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int restright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen rest = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		SymbolFunc fun = new SymbolFunc();
		fun.id = rest.id;
		fun.type = tipo.valor;
		fun.param = rest.param;
		s.fun = fun;
		s.valor = "<code>\n<A NAME=\"" + rest.id + "\"><span class=\"palres\">" + tipo.valor + "</span> " + rest.valor + "</code>\n<A HREF=\"#" + rest.id + "\">Inicio de la funcion</A> <A HREF=\"#inicio\">Inicio del programa</A><HR/>";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RESTPART ::= ident para LISTPARAM parc BLQ 
            {
              SymbolGen RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolGen lis = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen blq = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.id = ide;
		s.param = lis.param;
		s.valor = "<span CLASS=\"ident\">" + ide + "</span>(";
		for (int j = lis.param.size()-1; j > 0; j--){
			s.valor += lis.param.get(j) + ", ";
		} 
		s.valor += lis.param.get(0) + ")<BR/>" + blq.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLQ ::= llava SENTLIST llavc 
            {
              SymbolGen RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen sen = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "{<BR/><div style=\"padding-left:.5cm\">" + sen.valor + "</div>}</BR>\n";	
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTPARAM ::= LISTPARAM coma TYPE ident 
            {
              SymbolGen RESULT =null;
		int lisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SymbolGen lis = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen tipo = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s = lis;
		s.param.add("<span class=\"palres\">" + tipo.valor + "</span> <span class=\"ident\">" + ide + "</span>");
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTPARAM ::= TYPE ident 
            {
              SymbolGen RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen tipo = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		ArrayList<String> arr = new ArrayList<>();
		arr.add("<span class=\"palres\">" + tipo.valor + "</span> <span class=\"ident\">" + ide + "</span>");
		s.param = arr;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TYPE ::= voidd 
            {
              SymbolGen RESULT =null;
		int voleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int voright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "void";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TYPE ::= intt 
            {
              SymbolGen RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "int";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TYPE ::= floatt 
            {
              SymbolGen RESULT =null;
		int floleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int floright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String flo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "float";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTLIST ::= SENTLIST SENT 
            {
              SymbolGen RESULT =null;
		int senLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen senL = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen sen = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = senL.valor + sen.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTLIST ::= SENT 
            {
              SymbolGen RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen sen = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = sen.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENT ::= TYPE LID puntc 
            {
              SymbolGen RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolGen tipo = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen lid = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"palres\">" + tipo.valor + "</span> " + lid.valor + ";</BR>\n";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= ID igual EXP puntc 
            {
              SymbolGen RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SymbolGen ide = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen exp = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = ide.valor + " = " + exp.valor + ";</BR>\n";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= ident para LEXP parc puntc 
            {
              SymbolGen RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolGen lexp = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"ident\">" + ide + "</span> (" + lexp.valor + ");</BR>\n";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= returnn EXP puntc 
            {
              SymbolGen RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen exp = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"palres\">return</span> " + exp.valor + ";";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= error 
            {
              SymbolGen RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LID ::= ID 
            {
              SymbolGen RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen ide = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = ide.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LID ::= LID coma ID 
            {
              SymbolGen RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolGen lid = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen ide = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = lid.valor + ", " + ide.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LEXP ::= EXP 
            {
              SymbolGen RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen exp = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = exp.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LEXP ::= LEXP coma EXP 
            {
              SymbolGen RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolGen lexp = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen exp = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = lexp.valor + ", " + exp.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP ::= EXP OP EXP 
            {
              SymbolGen RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolGen exp1 = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen op = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen exp2 = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = exp1.valor + op.valor + exp2.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= FACTOR 
            {
              SymbolGen RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen fac = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = fac.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OP ::= mas 
            {
              SymbolGen RESULT =null;
		
		SymbolGen s = new SymbolGen();
		s.valor = " + ";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OP ::= menos 
            {
              SymbolGen RESULT =null;
		
		SymbolGen s = new SymbolGen();
		s.valor = " - ";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OP ::= mul 
            {
              SymbolGen RESULT =null;
		
		SymbolGen s = new SymbolGen();
		s.valor = " * ";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OP ::= div 
            {
              SymbolGen RESULT =null;
		
		SymbolGen s = new SymbolGen();
		s.valor = " / ";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP ::= rest 
            {
              SymbolGen RESULT =null;
		
		SymbolGen s = new SymbolGen();
		s.valor = " % ";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FACTOR ::= ident para LEXP parc 
            {
              SymbolGen RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen lexp = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"ident\">" + ide + "</span> (" + lexp.valor + ")";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FACTOR ::= para EXP parc 
            {
              SymbolGen RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen exp = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "(" + exp.valor + ")";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FACTOR ::= constint 
            {
              SymbolGen RESULT =null;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cons = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"cte\">" + cons + "</span>";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FACTOR ::= constfloat 
            {
              SymbolGen RESULT =null;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cons = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"cte\">" + cons + "</span>";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FACTOR ::= constlit 
            {
              SymbolGen RESULT =null;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cons = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"cte\">" + cons + "</span>";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FACTOR ::= ID 
            {
              SymbolGen RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen ide = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = ide.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ID ::= ident 
            {
              SymbolGen RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"ident\">" + ide + "</span>";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ID ::= ident punto ident 
            {
              SymbolGen RESULT =null;
		int ide1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ide1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ide1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ide2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"ident\">" + ide1 + "." + ide2 + "</span>";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ID ::= ident LDIM 
            {
              SymbolGen RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ldimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen ldim = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"ident\">" + ide + "</span>" + ldim.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ID ::= error 
            {
              SymbolGen RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENT ::= iff para LCOND parc thenn BLQ elsee BLQ 
            {
              SymbolGen RESULT =null;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		SymbolGen lcond = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int blq1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int blq1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolGen blq1 = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blq2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blq2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen blq2 = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"palres\">if</span> (" + lcond.valor + ") <span class=\"palres\">then</span></BR>\n" + blq1.valor + "<span class=\"palres\">else</span></BR>\n" + blq2.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENT ::= forr para ident igual EXP puntc LCOND puntc ident igual EXP parc BLQ 
            {
              SymbolGen RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		SymbolGen exp = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		SymbolGen lcond = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ide2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolGen exp2 = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen blq = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"palres\">for</span> (<span class=\"ident\">" + ide + "</span> = " + exp.valor + "; " + lcond.valor + "; <span class=\"ident\">" + ide2 + "</span> = " + exp2.valor + ")</BR>\n" + blq.valor; 
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENT ::= whilee para LCOND parc BLQ 
            {
              SymbolGen RESULT =null;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolGen lcond = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen blq = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"palres\">while</span> (" + lcond.valor + ")</BR>\n" + blq.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENT ::= doo BLQ untill para LCOND parc 
            {
              SymbolGen RESULT =null;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SymbolGen blq = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen lcond = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"palres\">do</span></BR>\n" + blq.valor + "until (" + lcond.valor + ")</BR>\n";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENT ::= BLQ 
            {
              SymbolGen RESULT =null;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen blq = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = blq.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LCOND ::= LCOND OPL LCOND 
            {
              SymbolGen RESULT =null;
		int lcond1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcond1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolGen lcond1 = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen opl = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lcond2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lcond2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen lcond2 = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = lcond1.valor + opl.valor + lcond2.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LCOND ::= COND 
            {
              SymbolGen RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen cond = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = cond.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LCOND ::= nott COND 
            {
              SymbolGen RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen cond = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "not " + cond.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPL ::= orr 
            {
              SymbolGen RESULT =null;
		
		SymbolGen s = new SymbolGen();
		s.valor = " or ";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPL ::= andd 
            {
              SymbolGen RESULT =null;
		
		SymbolGen s = new SymbolGen();
		s.valor = " and ";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPL ::= error 
            {
              SymbolGen RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COND ::= EXP OPR EXP 
            {
              SymbolGen RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolGen exp1 = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen opr = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolGen exp2 = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = exp1.valor + opr.valor + exp2.valor;
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPR ::= equals 
            {
              SymbolGen RESULT =null;
		
		SymbolGen s = new SymbolGen();
		s.valor = " == ";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPR ::= less 
            {
              SymbolGen RESULT =null;
		
		SymbolGen s = new SymbolGen();
		s.valor = " < ";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPR ::= more 
            {
              SymbolGen RESULT =null;
		
		SymbolGen s = new SymbolGen();
		s.valor = " > ";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPR ::= moreq 
            {
              SymbolGen RESULT =null;
		
		SymbolGen s = new SymbolGen();
		s.valor = " >= ";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPR ::= lesseq 
            {
              SymbolGen RESULT =null;
		
		SymbolGen s = new SymbolGen();
		s.valor = " <= ";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPR ::= error 
            {
              SymbolGen RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PART ::= struct ident llava LFIELD llavc puntc 
            {
              SymbolGen RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lfieldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lfieldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolGen lfield = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "<span CLASS=\"palres\">struct</span> <span class=\"ident\">" + ide + "</span></BR>\n{<div style=\"padding-left:.5cm\">" + lfield.valor + "</div>\n};</BR>\n";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PART ::= error 
            {
              SymbolGen RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LFIELD ::= LFIELD TYPE LID puntc 
            {
              SymbolGen RESULT =null;
		int lfieldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lfieldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SymbolGen lfield = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolGen type = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen lid = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = lfield.valor + "<span class=\"palres\">" + type.valor + "</span> " + lid.valor + ";</BR>\n";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFIELD",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LFIELD ::= TYPE LID puntc 
            {
              SymbolGen RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolGen type = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolGen lid = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "<span class=\"palres\">" + type.valor + "</span> " + lid.valor + ";</BR>\n";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFIELD",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LFIELD ::= error 
            {
              SymbolGen RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFIELD",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LDIM ::= LDIM corcha constint corchc 
            {
              SymbolGen RESULT =null;
		int ldimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ldimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SymbolGen ldim = (SymbolGen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cons = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = ldim.valor + "[<span class=\"cte\">" + cons + "</span>]";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDIM",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LDIM ::= corcha constint corchc 
            {
              SymbolGen RESULT =null;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cons = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		SymbolGen s = new SymbolGen();
		s.valor = "[<span class=\"cte\">" + cons + "</span>]";
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDIM",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LDIM ::= error 
            {
              SymbolGen RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDIM",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
